# MUST BE CUSTOMIZED
# Syntax: worker_processes <num>
# <num> = 2 * CPU cores
worker_processes auto;

# DO NOT CHANGE
daemon on;
master_process on;

# Minimum but important events
error_log  {{ nginx_home_dir }}/nginx_mos/nginx{{ owm_nginx_version }}/logs/error.log error;

# DO NOT CHANGE
pid    /run/nginx/nginx-mos.pid;

# MAY BE CUSTOMIZED
worker_rlimit_nofile 200000;
#Settings to obtain core dump
worker_rlimit_core  500M;
working_directory   {{ nginx_home_dir }}/nginx_mos/nginx{{ owm_nginx_version }};

events {
    # MUST BE CUSTOMIZED
    worker_connections 25000;
    #worker_connections 35000;

    #
    # use [ kqueue | rtsig | epoll | /dev/poll | select | poll ] ;
    use epoll;
    multi_accept off;
}

http {

    sendfile on;
    keepalive_requests 500000;
    keepalive_timeout 20s;
    tcp_nopush on;
    tcp_nodelay on;
    client_body_buffer_size 128k;
	
    open_file_cache max=25000 inactive=30s;
    open_file_cache_valid    60s;
    open_file_cache_min_uses 2;
    open_file_cache_errors   on;

    log_format timed_combined '$remote_addr - $remote_user [$time_local]  '
	
    '"$request" $status $body_bytes_sent '
    '"$http_referer" "$upstream_addr" '
    '$request_time $upstream_response_time $pipe';

    access_log logs/access.log timed_combined;

    upstream mosbackend {

{% if groups['queue'] is defined %}
{% for host in groups['queue'] %}
{% if host in groups[node_site + '-queue'] and hostvars[host]['clusterId'] == node_cluster %}
        server {{ host }}:{{mos_listening_port}};
{% endif %}
{% endfor %}
{% endif %}
        healthcheck_enabled;
        healthcheck_delay 10000;
        healthcheck_timeout 10000;
        healthcheck_failcount 2;
        healthcheck_send 'GET /mxos/monitor HTTP/1.0';
        keepalive 300;
    }

    server {
        listen {{mos_listening_port_proxy}};
        access_log logs/access.log timed_combined;
        keepalive_timeout 600;
        client_max_body_size 0;


        location /mxos {
           proxy_http_version 1.1;
           proxy_set_header Connection "";
           proxy_pass http://mosbackend;
        }

        location /mxos/health_status {
                healthcheck_status;
        }

        proxy_connect_timeout 600;
        proxy_read_timeout  300;
        proxy_send_timeout 600;
        proxy_next_upstream off;
    }
}

