---
- set_fact:
   node_site: "{{ item }}"
  with_items: "{{ sites }}"
  when: groups[item] is defined and inventory_hostname in groups[item]
  tags: [ 'owm-queue-admin', 'owm-queue-admin-init' ]

- name: Determine configuration server host
  set_fact:
      conf_server_name: "{{ hostvars[item]['inventory_hostname'] }}"
  with_items: "{{ groups['directory'] }}"
  when: "hostvars[item]['primary'] is defined"
  tags: [ 'owm-queue-admin', 'owm-queue-admin-init' ]

- name: Check if queue-admin is installed
  command: rpm -q owm-queue-admin
  register: rpm_check
  failed_when: rpm_check.rc > 1
  ignore_errors: True
  changed_when: no
  tags: [ 'owm-queue-admin' ]
  check_mode: no

- name: Fresh Install queue-admin
  shell: 'INSTALL_USER={{emailmx_user[0].username}} INSTALL_GROUP={{emailmx_user[0].username}} rpm -ivh --prefix={{emailmx_user[0].home}} {{owm_repo_url}}/owm-queue-admin-{{queue_admin_version}}.noarch.rpm'
  when: rpm_check.rc != 0
  tags: [ 'owm-queue-admin' ]
  
#
# Handle Upgrade / Downgrade
#

- name: Set Package Name
  set_fact: 
    package_name: "owm-queue-admin"
  when: rpm_check.rc == 0
  tags: [ 'owm-queue-admin' ]

# Check specific version
- name: Get version of RPM
  shell: "`which yum` list installed {{ package_name }} | grep installed | awk '{ print $2 }'"
  register: rpm_version
  when: rpm_check.rc == 0
  changed_when: False
  tags: [ 'owm-queue-admin' ]
  check_mode: no

- debug:
     msg: "System has {{ package_name }}-{{rpm_version.stdout}} installed"
  when: rpm_check.rc == 0
  tags: [ 'owm-queue-admin' ]

# See which version is higher or lower
- name: Compare installed RPM version with expected version
  shell: '/tmp/compare_versions.sh {{queue_admin_version}} {{rpm_version.stdout}}'
  register: version_comparison
  ignore_errors: yes
  when: rpm_check.rc == 0
  changed_when: False
  tags: [ 'owm-queue-admin' ]
  check_mode: no

- debug:
     msg: "Keeping the existing {{ package_name }}-{{rpm_version.stdout}} installed"
  when: rpm_check.rc == 0 and version_comparison.rc == 0
  tags: [ 'owm-queue-admin' ]

# Try to catch the case that user specified a RPM package that is not in the {{owm_repo_url}}
- name: Ensure {{owm_repo_url}} contains {{ package_name }}-{{queue_admin_version}} RPM
  uri: 
    url: "{{owm_repo_url}}/{{ package_name }}-{{queue_admin_version}}.noarch.rpm"
    method: HEAD
    status_code: 200
  register: rpmpkg_file
  when: rpm_check.rc == 0 and ( version_comparison.rc == 1 or version_comparison.rc == 2 )
  check_mode: no

- debug: 
     msg: "{{ package_name }}-{{queue_admin_version}}.noarch.rpm is not found in {{owm_repo_url}}"
  when: rpm_check.rc == 0 and version_comparison.rc != 0 and rpmpkg_file.content_type != "application/x-rpm"

- name: Abort if the {{ package_name }}-{{queue_admin_version}} RPM  is missing
  meta: end_play
  when: rpm_check.rc == 0 and version_comparison.rc != 0 and rpmpkg_file.content_type != "application/x-rpm"
  check_mode: no

- debug: 
     msg: "Do you want to continue the {{ package_name }} upgrade from {{rpm_version.stdout}} to {{queue_admin_version}} ?"
  when: rpm_check.rc == 0 and version_comparison.rc == 1 

- debug: 
     msg: "Do you want to continue the {{ package_name }} downgrade from {{rpm_version.stdout}} to {{queue_admin_version}} ?"
  when: rpm_check.rc == 0 and version_comparison.rc == 2 

- pause: seconds=30
  when: rpm_check.rc == 0 and ( version_comparison.rc == 1 or version_comparison.rc == 2 )

- name: Stop the Queue Admin
  shell:  runuser -l {{emailmx_user[0].username}} -g {{emailmx_user[0].username}} -c '{{emailmx_user[0].home}}/queueadmin/scripts/queueadmin stop'
  register: qadmin_stop
  failed_when: qadmin_stop.rc != 0 and qadmin_stop.rc != 1
  ignore_errors: True
  changed_when: no
  when: rpm_check.rc == 0 and ( version_comparison.rc == 1 or version_comparison.rc == 2 )
  tags: [ 'owm-queue-admin' ]

# If application is already installed, and is a lower version do an upgrade
- name: Upgrade {{ package_name }} from {{rpm_version.stdout}} to {{queue_admin_version}}
  shell: 'INSTALL_USER={{emailmx_user[0].username}} INSTALL_GROUP={{emailmx_user[0].username}} rpm -Uvh --prefix={{emailmx_user[0].home}} {{owm_repo_url}}/{{ package_name }}-{{queue_admin_version}}.noarch.rpm'
  when: rpm_check.rc == 0 and version_comparison.rc == 1
  tags: [ 'owm-queue-admin' ]

# If application is already installed, and is a higher version, downgrade
# Downgrade Step #1 - remove old package
- name: Downgrade Step 1, remove old {{ package_name }}-{{rpm_version.stdout}} package
  shell: 'rpm -e {{ package_name }}-{{rpm_version.stdout}}'
  when: rpm_check.rc == 0 and version_comparison.rc == 2
  tags: [ 'owm-queue-admin' ]

# Downgrade Step #2 - install older package
- name: Downgrade Step 2, install older {{ package_name }}-{{queue_admin_version}} package
  shell: 'INSTALL_USER={{emailmx_user[0].username}} INSTALL_GROUP={{emailmx_user[0].username}} rpm -ivh --prefix={{emailmx_user[0].home}} {{owm_repo_url}}/{{ package_name }}-{{queue_admin_version}}.noarch.rpm'
  when: rpm_check.rc == 0 and version_comparison.rc == 2
  tags: [ 'owm-queue-admin' ]

# Check specific version
- name: Get new version of RPM
  shell: "`which yum` list installed {{ package_name }} | grep installed | awk '{ print $2 }'"
  register: rpm_version
  when: rpm_check.rc == 0 and ( version_comparison.rc == 1 or version_comparison.rc == 2 )
  changed_when: False
  tags: [ 'owm-queue-admin' ]
  check_mode: no

- debug:
     msg: "System has {{ package_name }}-{{rpm_version.stdout}} installed (upgrade)"
  when: rpm_check.rc == 0 and version_comparison.rc == 1
  tags: [ 'owm-queue-admin' ]

- debug:
     msg: "System has {{ package_name }}-{{rpm_version.stdout}} installed (downgrade)"
  when: rpm_check.rc == 0 and version_comparison.rc == 2
  tags: [ 'owm-queue-admin' ]

- name: Determine Eureka URL 
  set_fact:
      eureka_url: |
        {% set comma = joiner(",") %}
        {% for host in groups[node_site + "-directory"] -%}
                 {{ comma() }}http://{{host}}:{{eureka_port}}/eureka/
        {%- endfor %}
  tags: [ 'owm-queue-admin', 'owm-queue-admin-init' ]
  
- debug: msg="owm-queue-admin eureka_url is {{eureka_url}}"

- name: Update the parameters in queueadmin properties file
  lineinfile: 
      dest: "{{emailmx_user[0].home}}/queueadmin/config/queueadmin.properties"
      regexp: "{{ item.regexp}}"
      line: "{{ item.line }}"
  with_items:
      - { regexp: 'confServHost', line: 'confServHost={{conf_server_name}}'}
      - { regexp: 'confServPort', line: 'confServPort={{confserver_port}}'}
      - { regexp: 'server.port',  line: 'server.port={{queue_admin_port}}'}
      - { regexp: 'eureka.client.serviceUrl.defaultZone', line: 'eureka.client.serviceUrl.defaultZone = {{eureka_url}}'}
  tags: [ 'owm-queue-admin' ]

- name: Fix snappy.tempdir
  lineinfile:
    dest: "{{emailmx_user[0].home}}/queueadmin/scripts/queueadmin"
    regexp: '^exec java(.*)'
    line: 'exec java -Dorg.xerial.snappy.tempdir=$INTERMAIL/tmp \1'
    backrefs: yes
    backup: yes
    state: present
  tags: ['owm-queue-admin', 'owm-queue-admin-fix-snappy' ]

- name: Check Queue Admin is already running
  shell: ps -ef | grep QAdminServiceMain | grep -v grep|grep "$pid"|awk '{print $2}'
  register: Q_PID
  tags: [ 'owm-queue-admin' ] 

- name: Start the Queue Admin
  shell:  runuser -l {{emailmx_user[0].username}} -g {{emailmx_user[0].username}} -c '{{emailmx_user[0].home}}/queueadmin/scripts/queueadmin start'
  when: Q_PID.stdout == ""
  tags: [ 'owm-queue-admin' ] 

- name: Copy CreateDefaultQueuesInCassandra.sh
  template:
    src: "CreateDefaultQueuesInCassandra.sh.j2"
    dest: "/tmp/CreateDefaultQueuesInCassandra.sh"
    owner: "root"
    group: "root"
    mode: 0644
  tags: [ 'owm-queue-admin', 'owm-queue-admin-create-queues' ]

- name: Run script CreateDefaultQueuesInCassandra.sh
  shell: "bash /tmp/CreateDefaultQueuesInCassandra.sh"
  tags: [ 'owm-queue-admin', 'owm-queue-admin-create-queues' ]

- name: copy rest-client-admin.sh
  template: 
    src: rest-client-admin.sh.j2
    dest: /usr/local/bin/rest-client-admin.sh
    mode: 0755
  tags: [ 'owm-queue-search', 'owm-queue-rest-client' ]
