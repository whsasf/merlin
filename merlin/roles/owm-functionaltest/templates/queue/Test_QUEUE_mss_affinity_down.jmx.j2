<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="2.8" jmeter="2.13 r1665067">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
{% if groups['affinity'] is defined %}
{% for host in groups[node_site + '-affinity'] %}
{% if hostvars[host]['component'] == 'mss'%}
          <elementProp name="g_nginxHostName{{loop.index}}" elementType="Argument">
            <stringProp name="Argument.name">g_nginxHostName{{loop.index}}</stringProp>
            <stringProp name="Argument.value">{{ host }}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="g_NginxPath{{loop.index}}" elementType="Argument">
            <stringProp name="Argument.name">g_NginxPath{{loop.index }}</stringProp>
            <stringProp name="Argument.value">{{ nginx_home_dir }}/nginx_{{ hostvars[host]['component'] }}/nginx{{ owm_nginx_version }}/scripts/nginx</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
{% endif %}
{% endfor %}
{% endif %}
{% if groups['fep'] is defined %}
{% for host in groups[node_site + '-fep'] %}
{% if loop.index < 2 %}
{% if hostvars[host]['ethernet_interfaces'] is defined %}
{% for interface in hostvars[host]['ethernet_interfaces'] %}
{% if interface['vlan'] is defined and interface['vlan'] == "access" %}
          <elementProp name="g_FEPServerName" elementType="Argument">
            <stringProp name="Argument.name">g_FEPServerName</stringProp>
            <stringProp name="Argument.value">{{ host + "-" + access_suffix }}</stringProp>
	    <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
{% endif %}
{% endfor %}
{% endif %}
{% endif %}
{% endfor %}
{% endif %}
{% if groups['queue'] is defined %}
{% for host in groups[node_site + '-queue'] %}
         <elementProp name="g_queServerName{{ loop.index }}" elementType="Argument">
            <stringProp name="Argument.name">g_queServerName{{ loop.index }}</stringProp>
            <stringProp name="Argument.value">{{ host }}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
{% endfor %}
{% endif %}
          <elementProp name="g_SmtpPort" elementType="Argument">
            <stringProp name="Argument.name">g_SmtpPort</stringProp>
            <stringProp name="Argument.value">25</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="g_AddressFrom" elementType="Argument">
            <stringProp name="Argument.name">g_AddressFrom</stringProp>
            <stringProp name="Argument.value">{{ jmeter_imap[0].user1_emailId }}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="g_AddressTo" elementType="Argument">
            <stringProp name="Argument.name">g_AddressTo</stringProp>
            <stringProp name="Argument.value">{{ jmeter_imap[0].user1_emailId }}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="g_imailUser" elementType="Argument">
            <stringProp name="Argument.name">g_imailUser</stringProp>
            <stringProp name="Argument.value">{{ emailmx_user[0].username }}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="g_ImapProtocol" elementType="Argument">
            <stringProp name="Argument.name">g_ImapProtocol</stringProp>
            <stringProp name="Argument.value">imap</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="g_ImapPort" elementType="Argument">
            <stringProp name="Argument.name">g_ImapPort</stringProp>
            <stringProp name="Argument.value">143</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="g_ImapUser" elementType="Argument">
            <stringProp name="Argument.name">g_ImapUser</stringProp>
            <stringProp name="Argument.value">{{ jmeter_imap[0].user1_username }}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="g_ImapPass" elementType="Argument">
            <stringProp name="Argument.name">g_ImapPass</stringProp>
            <stringProp name="Argument.value">{{ jmeter_imap[0].user1_password }}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Affinity manager is down" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1443428424000</longProp>
        <longProp name="ThreadGroup.end_time">1443428424000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
{% if groups['fep'] is defined %}
{% for host in groups[node_site + '-fep'] %}
{% if loop.index < 2 %}
       <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Clear the mta logs" enabled="true">
          <stringProp name="BeanShellSampler.query">import com.jcraft.jsch.Channel;
import com.jcraft.jsch.ChannelExec;
import com.jcraft.jsch.JSch;
import com.jcraft.jsch.Session;
import java.io.InputStream;
import java.util.Properties;

Channel channel = null;
Session session = null;
StringBuilder rv = new StringBuilder();

try {
  JSch jsch = new JSch();
  jsch.addIdentity(&quot;{{current_user_home_dir}}&quot;+&quot;/.ssh/id_rsa&quot;);
  session = jsch.getSession(&quot;root&quot;, &quot;${g_FEPServerName}&quot;);
  Properties config = new Properties();
  config.put(&quot;StrictHostKeyChecking&quot;, &quot;no&quot;);
  session.setConfig(config);
  session.connect();
  channel = session.openChannel(&quot;exec&quot;);            
  ((ChannelExec) channel).setCommand(&quot;runuser -l ${g_imailUser} -c &apos;cat /dev/null &gt; ${g_imailHome}/log/mta.log&apos;&quot;);
  channel.setInputStream(null);
  ((ChannelExec) channel).setErrStream(System.err);
  InputStream in = channel.getInputStream();
  channel.connect();
  byte[] tmp = new byte[1024];
  rv.append("New system date: ");
  while (true) {
  	while (in.available() &gt; 0) {
  		int i = in.read(tmp, 0, 1024);
  		if (i &lt; 0) break;
  		rv.append(new String(tmp, 0, i));
  	}
  	if (channel.isClosed()) {
  		break;
  	}
  	try {
  		Thread.sleep(100);
  	} catch (Exception ee) {
  		ee.printStackTrace();
  	}
  }
  byte[] tmp = new byte[1024];
} catch (Exception ex) {
        ex.printStackTrace();
	rv.append(ex.getMessage());
}
channel.disconnect();
session.disconnect();
print(rv.toString());
return rv.toString();
</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
	<BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Set Deferred Interval to 60" enabled="true">
          <stringProp name="BeanShellSampler.query">import com.jcraft.jsch.Channel;
import com.jcraft.jsch.ChannelExec;
import com.jcraft.jsch.JSch;
import com.jcraft.jsch.Session;
import java.io.InputStream;
import java.util.Properties;

Channel channel = null;
Session session = null;
StringBuilder rv = new StringBuilder();

try {
  JSch jsch = new JSch();
  jsch.addIdentity(&quot;{{current_user_home_dir}}&quot;+&quot;/.ssh/id_rsa&quot;);
  session = jsch.getSession(&quot;root&quot;, &quot;${g_FEPServerName}&quot;);
  Properties config = new Properties();
  config.put(&quot;StrictHostKeyChecking&quot;, &quot;no&quot;);
  session.setConfig(config);
  session.connect();
  channel = session.openChannel(&quot;exec&quot;);            
  ((ChannelExec) channel).setCommand(&quot;runuser -l ${g_imailUser} -c &apos;{{ emailmx_user[0].home }}/bin/imconfcontrol -install -key  /*/mta/deferProcessInterval=60&apos;&quot;);
  channel.setInputStream(null);
  ((ChannelExec) channel).setErrStream(System.err);
  InputStream in = channel.getInputStream();
  channel.connect();
  byte[] tmp = new byte[1024];
  rv.append("New system date: ");
  while (true) {
  	while (in.available() &gt; 0) {
  		int i = in.read(tmp, 0, 1024);
  		if (i &lt; 0) break;
  		rv.append(new String(tmp, 0, i));
  	}
  	if (channel.isClosed()) {
  		break;
  	}
  	try {
  		Thread.sleep(100);
  	} catch (Exception ee) {
  		ee.printStackTrace();
  	}
  }
  byte[] tmp = new byte[1024];
} catch (Exception ex) {
        ex.printStackTrace();
	rv.append(ex.getMessage());
}
channel.disconnect();
session.disconnect();
print(rv.toString());
return rv.toString();
</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
	<hashTree/>
	<BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Check Deferred Interval" enabled="true">
          <stringProp name="BeanShellSampler.query">import com.jcraft.jsch.Channel;
import com.jcraft.jsch.ChannelExec;
import com.jcraft.jsch.JSch;
import com.jcraft.jsch.Session;
import java.io.InputStream;
import java.util.Properties;

Channel channel = null;
Session session = null;
StringBuilder rv = new StringBuilder();

try {
  JSch jsch = new JSch();
  jsch.addIdentity(&quot;{{current_user_home_dir}}&quot;+&quot;/.ssh/id_rsa&quot;);
  session = jsch.getSession(&quot;root&quot;, &quot;${g_FEPServerName}&quot;);
  Properties config = new Properties();
  config.put(&quot;StrictHostKeyChecking&quot;, &quot;no&quot;);
  session.setConfig(config);
  session.connect();
  channel = session.openChannel(&quot;exec&quot;);            
  ((ChannelExec) channel).setCommand(&quot;runuser -l ${g_imailUser} -c &apos;grep deferProcessInterval {{ emailmx_user[0].home }}/config/config.db&apos;&quot;);
  channel.setInputStream(null);
  ((ChannelExec) channel).setErrStream(System.err);
  InputStream in = channel.getInputStream();
  channel.connect();
  byte[] tmp = new byte[1024];
  rv.append("New system date: ");
  while (true) {
  	while (in.available() &gt; 0) {
  		int i = in.read(tmp, 0, 1024);
  		if (i &lt; 0) break;
  		rv.append(new String(tmp, 0, i));
  	}
  	if (channel.isClosed()) {
  		break;
  	}
  	try {
  		Thread.sleep(100);
  	} catch (Exception ee) {
  		ee.printStackTrace();
  	}
  }
  byte[] tmp = new byte[1024];
} catch (Exception ex) {
        ex.printStackTrace();
	rv.append(ex.getMessage());
}
channel.disconnect();
session.disconnect();
print(rv.toString());
return rv.toString();
</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
	<hashTree/>
{% endif %}
{% endfor %}
{% endif %}
{% if groups['affinity'] is defined %}
{% for host in groups[node_site + '-affinity'] %}
{% if hostvars[host]['component'] == 'mss' %}
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Stop MSS Nginx" enabled="true">
          <stringProp name="BeanShellSampler.query">import com.jcraft.jsch.Channel;
import com.jcraft.jsch.ChannelExec;
import com.jcraft.jsch.JSch;
import com.jcraft.jsch.Session;
import java.io.InputStream;
import java.util.Properties;

Channel channel = null;
Session session = null;
StringBuilder rv = new StringBuilder();

try {
  JSch jsch = new JSch();
  jsch.addIdentity(&quot;{{current_user_home_dir}}&quot;+&quot;/.ssh/id_rsa&quot;);
  session = jsch.getSession(&quot;root&quot;, &quot;${g_nginxHostName{{loop.index}}}&quot;);
  Properties config = new Properties();
  config.put(&quot;StrictHostKeyChecking&quot;, &quot;no&quot;);
  session.setConfig(config);
  session.connect();
  channel = session.openChannel(&quot;exec&quot;);            
  ((ChannelExec) channel).setCommand(&quot;${g_NginxPath{{loop.index}}} stop&quot;);
  channel.setInputStream(null);
  ((ChannelExec) channel).setErrStream(System.err);
  InputStream in = channel.getInputStream();
  channel.connect();
  byte[] tmp = new byte[1024];
  rv.append(&quot;New system date: &quot;);
  while (true) {
  	while (in.available() &gt; 0) {
  		int i = in.read(tmp, 0, 1024);
  		if (i &lt; 0) break;
  		rv.append(new String(tmp, 0, i));
  	}
  	if (channel.isClosed()) {
  		break;
  	}
  	try {
  		Thread.sleep(100);
  	} catch (Exception ee) {
  		ee.printStackTrace();
  	}
  }
  byte[] tmp = new byte[1024];
} catch (Exception ex) {
        ex.printStackTrace();
	rv.append(ex.getMessage());
}
channel.disconnect();
session.disconnect();
print(rv.toString());
return rv.toString();</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
{% endif %}
{% endfor %}
{% endif %}
        <SmtpSampler guiclass="SmtpSamplerGui" testclass="SmtpSampler" testname="Send Mail" enabled="true">
          <stringProp name="SMTPSampler.server">${g_FEPServerName}</stringProp>
          <stringProp name="SMTPSampler.serverPort">${g_SmtpPort}</stringProp>
          <stringProp name="SMTPSampler.mailFrom">${g_AddressFrom}</stringProp>
          <stringProp name="SMTPSampler.replyTo"></stringProp>
          <stringProp name="SMTPSampler.receiverTo">${g_AddressTo}</stringProp>
          <stringProp name="SMTPSampler.receiverCC"></stringProp>
          <stringProp name="SMTPSampler.receiverBCC"></stringProp>
          <stringProp name="SMTPSampler.subject">Test Mail</stringProp>
          <stringProp name="SMTPSampler.suppressSubject">false</stringProp>
          <stringProp name="SMTPSampler.include_timestamp">true</stringProp>
          <stringProp name="SMTPSampler.message">${message}</stringProp>
          <stringProp name="SMTPSampler.plainBody">true</stringProp>
          <stringProp name="SMTPSampler.attachFile"></stringProp>
          <stringProp name="SMTPSampler.useSSL">false</stringProp>
          <stringProp name="SMTPSampler.useStartTLS">false</stringProp>
          <stringProp name="SMTPSampler.trustAllCerts">false</stringProp>
          <stringProp name="SMTPSampler.enforceStartTLS">false</stringProp>
          <stringProp name="SMTPSampler.useLocalTrustStore">false</stringProp>
          <stringProp name="SMTPSampler.trustStoreToUse"></stringProp>
          <boolProp name="SMTPSampler.use_eml">false</boolProp>
          <stringProp name="SMTPSampler.emlMessageToSend"></stringProp>
          <stringProp name="SMTPSampler.useAuth">false</stringProp>
          <stringProp name="SMTPSampler.password"></stringProp>
          <stringProp name="SMTPSampler.username"></stringProp>
          <stringProp name="SMTPSampler.messageSizeStatistics">false</stringProp>
          <stringProp name="SMTPSampler.enableDebug">false</stringProp>
          <collectionProp name="SMTPSampler.headerFields"/>
        </SmtpSampler>
        <hashTree/>
{% if groups['queue'] is defined %}
{% for host in groups[node_site + '-queue'] %}
        <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="Check the Message in queue directory " enabled="true">
          <stringProp name="hostname">${g_queServerName{{ loop.index }}}</stringProp>
          <intProp name="port">22</intProp>
          <stringProp name="username">${g_imailUser}</stringProp>
          <stringProp name="password">${g_imailPass}</stringProp>
          <stringProp name="command">cd  {{ emailmx_user[0].home }}/queue/deferred/mss/${g_nginxHostName{{ loop.index }}};ls | tail -1</stringProp>
        </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">result</stringProp>
            <stringProp name="RegexExtractor.regex">^[0-9]*$</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">error</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">60000</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <org.apache.jmeter.protocol.ssh.sampler.SSHSampler guiclass="TestBeanGUI" testclass="org.apache.jmeter.protocol.ssh.sampler.SSHSampler" testname="Change The Directory" enabled="true">
          <stringProp name="hostname">${g_queServerName{{ loop.index }}}</stringProp>
          <intProp name="port">22</intProp>
          <stringProp name="username">${g_imailUser}</stringProp>
          <stringProp name="password">${g_imailPass}</stringProp>
          <stringProp name="command">cd {{ emailmx_user[0].home }}/queue/deferred/mss/${g_nginxHostName{{ loop.index }}}/${result_g0};ls *$g_FEPHostName{{ loop.index }}*Control</stringProp>
        </org.apache.jmeter.protocol.ssh.sampler.SSHSampler>
        <hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">60000</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
{% endfor %}
{% endif %}
{% if groups['fep'] is defined %}
{% for host in groups[node_site + '-fep'] %}
{% if loop.index < 2 %}
     <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Check MTA logs" enabled="true">
          <stringProp name="BeanShellSampler.query">import com.jcraft.jsch.Channel;
import com.jcraft.jsch.ChannelExec;
import com.jcraft.jsch.JSch;
import com.jcraft.jsch.Session;
import java.io.InputStream;
import java.util.Properties;

Channel channel = null;
Session session = null;
StringBuilder rv = new StringBuilder();

try {
  JSch jsch = new JSch();
  jsch.addIdentity(&quot;{{current_user_home_dir}}&quot;+&quot;/.ssh/id_rsa&quot;);
  session = jsch.getSession(&quot;root&quot;, &quot;${g_FEPServerName}&quot;);
  Properties config = new Properties();
  config.put(&quot;StrictHostKeyChecking&quot;, &quot;no&quot;);
  session.setConfig(config);
  session.connect();
  channel = session.openChannel(&quot;exec&quot;);            
  ((ChannelExec) channel).setCommand(&quot;runuser -l ${g_imailUser} -c &apos;grep -i deferred:user {{ emailmx_user[0].home }}/log/mta.log&apos;&quot;);
  channel.setInputStream(null);
  ((ChannelExec) channel).setErrStream(System.err);
  InputStream in = channel.getInputStream();
  channel.connect();
  byte[] tmp = new byte[1024];
  rv.append("New system date: ");
  while (true) {
  	while (in.available() &gt; 0) {
  		int i = in.read(tmp, 0, 1024);
  		if (i &lt; 0) break;
  		rv.append(new String(tmp, 0, i));
  	}
  	if (channel.isClosed()) {
  		break;
  	}
  	try {
  		Thread.sleep(100);
  	} catch (Exception ee) {
  		ee.printStackTrace();
  	}
  }
  byte[] tmp = new byte[1024];
} catch (Exception ex) {
        ex.printStackTrace();
	rv.append(ex.getMessage());
}
channel.disconnect();
session.disconnect();
print(rv.toString());
return rv.toString();
</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
	<hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">60000</stringProp>
          </ConstantTimer>
        <hashTree/>
        <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1107342714">deferred:user</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.scope">children</stringProp>
         </ResponseAssertion>
          <hashTree/>
         </hashTree>
{% endif %} 
{% endfor %}
{% endif %} 
{% if groups['affinity'] is defined %}
{% for host in groups[node_site + '-affinity'] %}
{% if hostvars[host]['component'] == 'mss' %}
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Start MSS Nginx" enabled="true">
          <stringProp name="BeanShellSampler.query">import com.jcraft.jsch.Channel;
import com.jcraft.jsch.ChannelExec;
import com.jcraft.jsch.JSch;
import com.jcraft.jsch.Session;
import java.io.InputStream;
import java.util.Properties;

Channel channel = null;
Session session = null;
StringBuilder rv = new StringBuilder();

try {
  JSch jsch = new JSch();
  jsch.addIdentity(&quot;{{current_user_home_dir}}&quot;+&quot;/.ssh/id_rsa&quot;);
  session = jsch.getSession(&quot;root&quot;, &quot;${g_nginxHostName{{loop.index}}}&quot;);
  Properties config = new Properties();
  config.put(&quot;StrictHostKeyChecking&quot;, &quot;no&quot;);
  session.setConfig(config);
  session.connect();
  channel = session.openChannel(&quot;exec&quot;);            
  ((ChannelExec) channel).setCommand(&quot;${g_NginxPath{{loop.index}}} start&quot;);
  channel.setInputStream(null);
  ((ChannelExec) channel).setErrStream(System.err);
  InputStream in = channel.getInputStream();
  channel.connect();
  byte[] tmp = new byte[1024];
  rv.append(&quot;New system date: &quot;);
  while (true) {
  	while (in.available() &gt; 0) {
  		int i = in.read(tmp, 0, 1024);
  		if (i &lt; 0) break;
  		rv.append(new String(tmp, 0, i));
  	}
  	if (channel.isClosed()) {
  		break;
  	}
  	try {
  		Thread.sleep(100);
  	} catch (Exception ee) {
  		ee.printStackTrace();
  	}
  }
  byte[] tmp = new byte[1024];
} catch (Exception ex) {
        ex.printStackTrace();
	rv.append(ex.getMessage());
}
channel.disconnect();
session.disconnect();
print(rv.toString());
return rv.toString();
</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">60000</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
{% endif %}
{% endfor %}
{% endif %}
{% if groups['fep'] is defined %}
{% for host in groups[node_site + '-fep'] %}
{% if loop.index < 2 %}
     <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Check MTA logs" enabled="true">
          <stringProp name="BeanShellSampler.query">import com.jcraft.jsch.Channel;
import com.jcraft.jsch.ChannelExec;
import com.jcraft.jsch.JSch;
import com.jcraft.jsch.Session;
import java.io.InputStream;
import java.util.Properties;

Channel channel = null;
Session session = null;
StringBuilder rv = new StringBuilder();

try {
  JSch jsch = new JSch();
  jsch.addIdentity(&quot;{{current_user_home_dir}}&quot;+&quot;/.ssh/id_rsa&quot;);
  session = jsch.getSession(&quot;root&quot;, &quot;${g_FEPServerName}&quot;);
  Properties config = new Properties();
  config.put(&quot;StrictHostKeyChecking&quot;, &quot;no&quot;);
  session.setConfig(config);
  session.connect();
  channel = session.openChannel(&quot;exec&quot;);            
  ((ChannelExec) channel).setCommand(&quot;runuser -l ${g_imailUser} -c &apos;grep -i delivered:user {{ emailmx_user[0].home }}/log/mta.log&apos;&quot;);
  channel.setInputStream(null);
  ((ChannelExec) channel).setErrStream(System.err);
  InputStream in = channel.getInputStream();
  channel.connect();
  byte[] tmp = new byte[1024];
  rv.append("New system date: ");
  while (true) {
  	while (in.available() &gt; 0) {
  		int i = in.read(tmp, 0, 1024);
  		if (i &lt; 0) break;
  		rv.append(new String(tmp, 0, i));
  	}
  	if (channel.isClosed()) {
  		break;
  	}
  	try {
  		Thread.sleep(100);
  	} catch (Exception ee) {
  		ee.printStackTrace();
  	}
  }
  byte[] tmp = new byte[1024];
} catch (Exception ex) {
        ex.printStackTrace();
	rv.append(ex.getMessage());
}
channel.disconnect();
session.disconnect();
print(rv.toString());
return rv.toString();
</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
	<hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">90000</stringProp>
          </ConstantTimer>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1927966463">delivered:user</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.scope">children</stringProp>
          </ResponseAssertion>
          <hashTree/>
         </hashTree>
{% endif %} 
{% endfor %}
{% endif %} 
        <MailReaderSampler guiclass="MailReaderSamplerGui" testclass="MailReaderSampler" testname="Retrive Mail using IMAP" enabled="true">
          <stringProp name="host_type">${g_ImapProtocol}</stringProp>
          <stringProp name="folder">INBOX</stringProp>
          <stringProp name="host">${g_FEPServerName}</stringProp>
          <stringProp name="port">${g_ImapPort}</stringProp>
          <stringProp name="username">${g_ImapUser}</stringProp>
          <stringProp name="password">${g_ImapPass}</stringProp>
          <intProp name="num_messages">-1</intProp>
          <boolProp name="delete">false</boolProp>
          <stringProp name="SMTPSampler.useSSL">true</stringProp>
          <stringProp name="SMTPSampler.useStartTLS">false</stringProp>
          <stringProp name="SMTPSampler.trustAllCerts">false</stringProp>
          <stringProp name="SMTPSampler.enforceStartTLS">false</stringProp>
          <stringProp name="SMTPSampler.useLocalTrustStore">false</stringProp>
          <stringProp name="SMTPSampler.trustStoreToUse"></stringProp>
        </MailReaderSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2074754861">message found</stringProp>
              <stringProp name="1307789103">current timestamp</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.scope">children</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
	<MailReaderSampler guiclass="MailReaderSamplerGui" testclass="MailReaderSampler" testname="Delete Mail using IMAP" enabled="true">
          <stringProp name="host_type">${g_ImapProtocol}</stringProp>
          <stringProp name="folder">INBOX</stringProp>
          <stringProp name="host">${g_FEPServerName}</stringProp>
          <stringProp name="port">${g_ImapPort}</stringProp>
          <stringProp name="username">${g_ImapUser}</stringProp>
          <stringProp name="password">${g_ImapPass}</stringProp>
          <intProp name="num_messages">-1</intProp>
          <boolProp name="delete">true</boolProp>
          <stringProp name="SMTPSampler.useSSL">true</stringProp>
          <stringProp name="SMTPSampler.useStartTLS">false</stringProp>
          <stringProp name="SMTPSampler.trustAllCerts">false</stringProp>
          <stringProp name="SMTPSampler.enforceStartTLS">false</stringProp>
          <stringProp name="SMTPSampler.useLocalTrustStore">false</stringProp>
          <stringProp name="SMTPSampler.trustStoreToUse"></stringProp>
        </MailReaderSampler>
        <hashTree/>
{% if groups['fep'] is defined %}
{% for host in groups[node_site + '-fep'] %}
{% if loop.index < 2 %}
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Reset Deferred Interval value" enabled="true">
          <stringProp name="BeanShellSampler.query">import com.jcraft.jsch.Channel;
import com.jcraft.jsch.ChannelExec;
import com.jcraft.jsch.JSch;
import com.jcraft.jsch.Session;
import java.io.InputStream;
import java.util.Properties;

Channel channel = null;
Session session = null;
StringBuilder rv = new StringBuilder();

try {
  JSch jsch = new JSch();
  jsch.addIdentity(&quot;{{current_user_home_dir}}&quot;+&quot;/.ssh/id_rsa&quot;);
  session = jsch.getSession(&quot;root&quot;, &quot;${g_FEPServerName}&quot;);
  Properties config = new Properties();
  config.put(&quot;StrictHostKeyChecking&quot;, &quot;no&quot;);
  session.setConfig(config);
  session.connect();
  channel = session.openChannel(&quot;exec&quot;);            
  ((ChannelExec) channel).setCommand(&quot;runuser -l ${g_imailUser} -c &apos;{{ emailmx_user[0].home }}/bin/imconfcontrol -install -key  /*/mta/deferProcessInterval=600&apos;&quot;);
  channel.setInputStream(null);
  ((ChannelExec) channel).setErrStream(System.err);
  InputStream in = channel.getInputStream();
  channel.connect();
  byte[] tmp = new byte[1024];
  rv.append("New system date: ");
  while (true) {
  	while (in.available() &gt; 0) {
  		int i = in.read(tmp, 0, 1024);
  		if (i &lt; 0) break;
  		rv.append(new String(tmp, 0, i));
  	}
  	if (channel.isClosed()) {
  		break;
  	}
  	try {
  		Thread.sleep(100);
  	} catch (Exception ee) {
  		ee.printStackTrace();
  	}
  }
  byte[] tmp = new byte[1024];
} catch (Exception ex) {
        ex.printStackTrace();
	rv.append(ex.getMessage());
}
channel.disconnect();
session.disconnect();
print(rv.toString());
return rv.toString();
</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
       <hashTree/>
{% endif %} 
{% endfor %}
{% endif %}
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
