<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="2.8" jmeter="2.13 r1665067">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="g_IMAPServerName" elementType="Argument">
            <stringProp name="Argument.name">g_IMAPServerName</stringProp>
{% if groups['fep'] is defined %}
{% for host in groups[node_site + '-fep'] %}
{% if loop.index < 2 %}
{% if hostvars[host]['ethernet_interfaces'] is defined %}
{% for interface in hostvars[host]['ethernet_interfaces'] %}
{% if interface['vlan'] is defined and interface['vlan'] == "access" %}
            <stringProp name="Argument.value">{{ host + "-" + access_suffix }}</stringProp>
{% endif %}
{% endfor %}
{% endif %}			  
{% endif %}
{% endfor %}
{% endif %}
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="g_ImapPort" elementType="Argument">
            <stringProp name="Argument.name">g_ImapPort</stringProp>
            <stringProp name="Argument.value">143</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="g_UserPass" elementType="Argument">
            <stringProp name="Argument.name">g_UserPass</stringProp>
            <stringProp name="Argument.value">{{ jmeter_imap[0].user1_password }}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="g_UserName" elementType="Argument">
            <stringProp name="Argument.name">g_UserName</stringProp>
            <stringProp name="Argument.value">{{ jmeter_imap[0].user1}}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="g_ImailUser" elementType="Argument">
            <stringProp name="Argument.name">g_ImailUser</stringProp>
            <stringProp name="Argument.value">{{ emailmx_user[0].username }}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="g_ImailPass" elementType="Argument">
            <stringProp name="Argument.name">g_ImailPass</stringProp>
            <stringProp name="Argument.value">{{ emailmx_user[0].username }}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="g_user_Home" elementType="Argument">
            <stringProp name="Argument.name">g_user_Home</stringProp>
            <stringProp name="Argument.value">{{ emailmx_user[0].home }}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Verify the session time out of imapserv" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1444281129000</longProp>
        <longProp name="ThreadGroup.end_time">1444281129000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
{% if groups['fep'] is defined %}
{% for host in groups[node_site + '-fep'] %}
{% if loop.index < 2 %}
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
          <stringProp name="BeanShellSampler.query">import com.jcraft.jsch.Channel;
import com.jcraft.jsch.ChannelExec;
import com.jcraft.jsch.JSch;
import com.jcraft.jsch.Session;
import java.io.InputStream;
import java.util.Properties;

Channel channel = null;
Session session = null;
StringBuilder rv = new StringBuilder();

try {
  JSch jsch = new JSch();
  jsch.addIdentity(&quot;{{current_user_home_dir}}&quot;+&quot;/.ssh/id_rsa&quot;);
  session = jsch.getSession(&quot;root&quot;, &quot;${g_IMAPServerName}&quot;);
  Properties config = new Properties();
  config.put(&quot;StrictHostKeyChecking&quot;, &quot;no&quot;);
  session.setConfig(config);
  session.connect();
  channel = session.openChannel(&quot;exec&quot;);            
  ((ChannelExec) channel).setCommand(&quot;runuser -l ${g_ImailUser} -c &apos;${g_user_Home}/bin/imconfcontrol -install -key /*/imapserv/clientTimeout=60&apos;&quot;);
  channel.setInputStream(null);
  ((ChannelExec) channel).setErrStream(System.err);
  InputStream in = channel.getInputStream();
  channel.connect();
  byte[] tmp = new byte[1024];
  rv.append("New system date: ");
  while (true) {
  	while (in.available() &gt; 0) {
  		int i = in.read(tmp, 0, 1024);
  		if (i &lt; 0) break;
  		rv.append(new String(tmp, 0, i));
  	}
  	if (channel.isClosed()) {
  		break;
  	}
  	try {
  		Thread.sleep(100);
  	} catch (Exception ee) {
  		ee.printStackTrace();
  	}
  }
  byte[] tmp = new byte[1024];
} catch (Exception ex) {
        ex.printStackTrace();
	rv.append(ex.getMessage());
}
channel.disconnect();
session.disconnect();
print(rv.toString());
return rv.toString();
</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
      </hashTree>
{% endif %} 
{% endfor %}
{% endif %} 
        <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="Keep the session idle for 60 seconds " enabled="true">
          <stringProp name="TCPSampler.server">${g_IMAPServerName}</stringProp>
          <boolProp name="TCPSampler.reUseConnection">false</boolProp>
          <stringProp name="TCPSampler.port">${g_ImapPort}</stringProp>
          <boolProp name="TCPSampler.nodelay">false</boolProp>
          <stringProp name="TCPSampler.timeout"></stringProp>
          <stringProp name="TCPSampler.request">a login ${g_UserName} ${g_UserPass}
a select inbox
</stringProp>
          <boolProp name="TCPSampler.closeConnection">false</boolProp>
          <stringProp name="ConfigTestElement.username"></stringProp>
          <stringProp name="ConfigTestElement.password"></stringProp>
        </TCPSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1114917391">a OK LOGIN completed</stringProp>
              <stringProp name="-529983800">a OK [READ-WRITE] SELECT completed</stringProp>
              <stringProp name="876999719">* BYE [READ-WRITE] Connection idle for too long</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
{% if groups['fep'] is defined %}
{% for host in groups[node_site + '-fep'] %}
{% if loop.index < 2 %}
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
          <stringProp name="BeanShellSampler.query">import com.jcraft.jsch.Channel;
import com.jcraft.jsch.ChannelExec;
import com.jcraft.jsch.JSch;
import com.jcraft.jsch.Session;
import java.io.InputStream;
import java.util.Properties;

Channel channel = null;
Session session = null;
StringBuilder rv = new StringBuilder();

try {
  JSch jsch = new JSch();
  jsch.addIdentity(&quot;{{current_user_home_dir}}&quot;+&quot;/.ssh/id_rsa&quot;);
  session = jsch.getSession(&quot;root&quot;, &quot;${g_IMAPServerName}&quot;);
  Properties config = new Properties();
  config.put(&quot;StrictHostKeyChecking&quot;, &quot;no&quot;);
  session.setConfig(config);
  session.connect();
  channel = session.openChannel(&quot;exec&quot;);            
  ((ChannelExec) channel).setCommand(&quot;runuser -l ${g_ImailUser} -c &apos;grep -i ImapConnTimedOut log/imapserv.log&apos;&quot;);
  channel.setInputStream(null);
  ((ChannelExec) channel).setErrStream(System.err);
  InputStream in = channel.getInputStream();
  channel.connect();
  byte[] tmp = new byte[1024];
  rv.append("New system date: ");
  while (true) {
  	while (in.available() &gt; 0) {
  		int i = in.read(tmp, 0, 1024);
  		if (i &lt; 0) break;
  		rv.append(new String(tmp, 0, i));
  	}
  	if (channel.isClosed()) {
  		break;
  	}
  	try {
  		Thread.sleep(100);
  	} catch (Exception ee) {
  		ee.printStackTrace();
  	}
  }
  byte[] tmp = new byte[1024];
} catch (Exception ex) {
        ex.printStackTrace();
	rv.append(ex.getMessage());
}
channel.disconnect();
session.disconnect();
print(rv.toString());
return rv.toString();
</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
      </hashTree>
{% endif %} 
{% endfor %}
{% endif %} 
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1259211766">ImapConnTimedOut</stringProp>
              <stringProp name="1037631110">user=${g_UserName}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
