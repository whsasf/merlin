// Keyspace for QueueServer 
// For Lab, For Mulinode cassandra

CREATE KEYSPACE IF NOT EXISTS QueueService
  WITH REPLICATION = {
     'class' : 'NetworkTopologyStrategy',
{% set comma = joiner(",") %}
{% for site in sites -%}
      {{ comma() }}'{{site}}' : '{{metareplicationfactor}}'
{%- endfor %}
    }
  AND DURABLE_WRITES = true;


//Just for UT purpose  For Singlenode Cassandra
//CREATE KEYSPACE QueueService WITH replication = {
// 'class': 'SimpleStrategy',
//  'replication_factor': '1'
//};


Use QueueService;


// MessageRecords
//  This column family contains the actual message (for small messages) and
//  metadata, or metadata + pointer record (Blob URL) for large messages.
//      SOME 'QueueItems' functionality, and adds some housekeeping information
// messageId: Unique random(?) UUID of the message, assigned on insert.
//      Does it make more sense for this to be in v1 format based on create time?
//      May give time-ordered view of records inserted.
//      May track insert time based on TIMESTAMP of this cell itself instead of explicit field
// queueName: The name of the queue that this message is CURRENTLY assigned to.
//      
// submitTime: The last time this message was submitted to a queue. 
// 


// OWM_Config. This contains the configurations like schema versions, updates, etc.

CREATE TABLE IF NOT EXISTS OWM_Config (
    service     text,       // Short name of this service. Part of primary key.
    component   text,       // sub category, component, folder. Part of primary key
    server      text,       // Server. May be wildcard or blank. Part of primary key.
    key         text,       // Clustering key.
    value       text,       // Configuration value.
    PRIMARY KEY((service, component, server), key) ) 
    WITH CLUSTERING ORDER BY (key ASC ) ;

INSERT INTO owm_config (service, component, server, key, value ) VALUES ( 'QUEUESERVER', 'Schema', '', 'Version', '0.1' );

CREATE TABLE IF NOT EXISTS MessageRecords (
    messageId   uuid,
    queueName   text,       
    bucketId    int,        
    submitTime  timestamp,
    scheduledTime timestamp,
    dequeueTime    timestamp,
    size        int,        
    attempt     int,        
    operationId int,        
    metadata    text,       
    bloburl     text,    
    z_body      blob,       
    PRIMARY KEY (messageId)
);


// QueueBucket
//  This better describes the structure. One partition per queue bucket. A queue bucket is:
//  queueName:  Name of the queue
//  bucketId:   Integer for bucket ID. Typically a low-moderate value for total buckets, because third part is:
//  scheduledMinute:    timestamp for on-the-minute delivery bucket for this specific bucket.
//  scheduledTime:    timestamp for requested delivery time. Cluster key.
//  messageId:   Message Id of message to be delivered. Cluster key (required for uniqueness)
//
CREATE TABLE IF NOT EXISTS QueueBucket (
    queueName   text,
    bucketId    int,
    scheduledMinute timestamp,
    scheduledTime timestamp,
    messageId   uuid,
    PRIMARY KEY ((queueName, bucketId, scheduledMinute), scheduledTime, messageId)
)  WITH compaction = { 'class' :  'LeveledCompactionStrategy'  } AND speculative_retry='NONE' ;


// InDelivery
//  Once a message has been dequeued, place an entry in the responsible servers InDelivery bucket for that queue.
//  only a single bucket for InDelivery per server+queue mapping is necessary. This is mostly fire-and-forget, and 
//  should only be accessed by maintenance scripts.
// We do not care about the scheduled time in this CF, as that is stored in MessageRecords.
//  queueName:  Name of the queue
//  serverId:   uuid of the server that pulled the message. 
//  dequeuedMinute:    timestamp for on-the-minute delivery bucket for this specific bucket.
//  scheduledTime:    timestamp for requested delivery time. Cluster key.
//  messageId:   Message Id of message to be delivered. Cluster key (required for uniqueness) 
// dequeuedTime: Time of dequeue 
// bucketId : bucket Id
CREATE TABLE IF NOT EXISTS InDelivery (
    queueName       text,
    nodeId        uuid,
    dequeuedMinute    timestamp,
    messageId       uuid,
	bucketid        int,
    dequeuedTime    timestamp,
    PRIMARY KEY ((queueName, nodeId,bucketId, dequeuedMinute),dequeuedTime, messageId)
);


// Statistics
// Stores Counters for queue depth, size in bytes for global queues and domains
//	queueObject: Holds the text q_<queueName> or d_<domainName> to maintain stats. 
//      It is a partition key.
//  bucketId: Unique identifier for a bucket. 
//	count: This field will hold the count of objects as tracked by this microserver 
//	size: Counter value for a queueObject for a specific microserver
// Only possible problem here is the small number of rows, typically employed for this system.
// May wish to further break it up by microservice server instance, and have each QS track its own counters.
//  not really necessary with our funcational counters, though, and this should be fairly basic.
CREATE TABLE IF NOT EXISTS Statistics (
    queueObject text,
    bucketId    int,
    count   counter,
    size    counter,
    PRIMARY KEY (queueObject, bucketId)
);


// queueName:       Name of this queue. Partition key.
// bucketId:        bucket for this queue. Clustering key.
// enqueueBy:       v3 UUID of server that is currently (or last) wrote to this bucket, or NULL.
// dequeueBy:       v3 UUID of server that is reading / last read from this bucket. 
//                      Only this server may clear records from this bucket if populated. May be NULL.
// lastScheduled:   timestamp of latest scheduled delivery write by server. The value itself is the scheduled time.
//                      write times are taken from the written timestamp (WRITETIME(lastScheduled))
// lastDequeued:    timestamp of last read/dequeue by server in 'drainedBy'. This is the timestamp (deliverTime) 
//                      of message pulled, not the actual time it was pulled. check timestamp field for actual time.
CREATE TABLE IF NOT EXISTS BucketMapping (
    queueName       text,
    bucketId        int,
    enqueueBy       uuid,
    dequeueBy       uuid,
    lastScheduled   timestamp,
    lastDequeued    timestamp,
    PRIMARY KEY (queueName, bucketId)
);


// ServiceHeartbeat - very simple heartbeat to allow override / takeover of buckets
// This is really only checked if some queues appear to have buckets that need takeover.
//  serverId: v3 UUID identifying server
//  state: STARTING, RUNNING, STOPPING, CLEANUP, STOPPED
//          Originally had 'heartbeat: timestamp of last heartbeat.' Better is just update 
//              'state' field with current state and increment heartbeat counter. 
//      Servers should update their record once per heartbeat interval: 5-30 seconds.
//  queues: Clustering key. One entry for each queue name. 'null' allowed as special value.
//  
CREATE TABLE IF NOT EXISTS ServiceHeartbeat (
    nodeId        uuid,
    queueName       text,
    state           text,
    PRIMARY KEY (nodeId, queueName)
);


// Queues - any named queue-specific information related to the system. 
//  queueName   Primary key. Name of the queue as referenced in the application
//  enqueueEnabled    boolean
//  dequeueEnabled    boolean
//  bucketCount     int
CREATE TABLE IF NOT EXISTS Queues (
    queueName       text,
    enqueueEnabled    boolean,
    dequeueEnabled    boolean,
    type              text,
    PRIMARY KEY(queueName)
);


// Keyspace for Blob Storage
// Below RF is for testing / lab work. Use multiple replicas, normally.
CREATE KEYSPACE IF NOT EXISTS BlobStore
  WITH REPLICATION = {
     'class' : 'NetworkTopologyStrategy',
{% set comma = joiner(",") %}
{% for site in sites -%}
      {{ comma() }}'{{site}}' : '{{blobreplicationfactor}}'
{%- endfor %}
    }
  AND DURABLE_WRITES = true;

//Just for UT purpose  For Singlenode Cassandra
//CREATE KEYSPACE BlobStore WITH replication = {
 // 'class': 'SimpleStrategy',
// 'replication_factor': '1'
//};

Use Blobstore;


// This CF style is *mostly* backwards-compatible with the v1 schema. To upgrade an old schema, some
// changes would have to be applied. Some testing required, but very little change to on disk data for legacy mode.
// The only thing that is different on a v1 exported schema is that the chunkId is 'blob' instead of 'uuid'.
// May be able to alter to blob type; if not, we can also use blob type and populate with UUID, while maintaining a level of cross compatiblity.

// OWM_Config This contains configuration parameters for tracking schema versions, updates, etc

CREATE TABLE IF NOT EXISTS OWM_Config (
    service     text,       // Short name of this service. Part of primary key.
    component   text,       // sub category, component, folder. Part of PK.
    server      text,       // Server. May be wildcard or blank. Part of PK.
    key         text,       // Clustering key.
    value       text,       // Configuration value.
    PRIMARY KEY((service, component, server), key) ) 
    WITH CLUSTERING ORDER BY (key ASC ) ;

INSERT INTO owm_config (service, component, server, key, value ) VALUES ( 'BLOBSTORE', 'Schema', '', 'Version', '0.1' );


// Default setting for chunk size in KB. Chunk size is still stored per-message.
INSERT INTO owm_config (service, component, server, key, value ) VALUES ( 'BLOBSTORE', 'Service', '', 'ChunkSizeKB', '128' );

// MessageBuckets == number of CF_Message_#, starting from 0. Default should be 10. This CANNOT BE CHANGED AFTER INSTALL.
INSERT INTO owm_config (service, component, server, key, value ) VALUES ( 'BLOBSTORE', 'Service', '', 'MessageBuckets', '10' );

// How is the data bucketized? Legacy, or UUID modulo.  Legacy uses its own hash.
INSERT INTO owm_config (service, component, server, key, value ) VALUES ( 'BLOBSTORE', 'Service', '', 'MessageBucket_selector', 'UUID_Modulo' );

// Chunking type can be Partition (one partition per chunk), or Legacy (wide row, full blob per row.)
INSERT INTO owm_config (service, component, server, key, value ) VALUES ( 'BLOBSTORE', 'Service', '', 'ChunkingType', 'Partition' );

// Is compression local to cassandra, or is data precompressed?
INSERT INTO owm_config (service, component, server, key, value ) VALUES ( 'BLOBSTORE', 'Service', '', 'Compression', 'UPSTREAM' );

 CREATE TABLE IF NOT EXISTS message_0 (
    chunkId uuid,
    field bigint,
    value blob,
    PRIMARY KEY (chunkId, field)
) WITH COMPACT STORAGE
    AND CLUSTERING ORDER BY (field ASC)
    AND compression = {'sstable_compression': ''}
    AND min_index_interval = 256;
   

 CREATE TABLE IF NOT EXISTS message_1 (
    chunkId uuid,
    field bigint,
    value blob,
    PRIMARY KEY (chunkId, field)
) WITH COMPACT STORAGE
    AND CLUSTERING ORDER BY (field ASC)
    AND compression = {'sstable_compression': ''}
    AND min_index_interval = 256;

 CREATE TABLE IF NOT EXISTS message_2 (
    chunkId uuid,
    field bigint,
    value blob,
    PRIMARY KEY (chunkId, field)
) WITH COMPACT STORAGE
    AND CLUSTERING ORDER BY (field ASC)
    AND compression = {'sstable_compression': ''}
    AND min_index_interval = 256;

 CREATE TABLE IF NOT EXISTS message_3 (
    chunkId uuid,
    field bigint,
    value blob,
    PRIMARY KEY (chunkId, field)
) WITH COMPACT STORAGE
    AND CLUSTERING ORDER BY (field ASC)
    AND compression = {'sstable_compression': ''}
    AND min_index_interval = 256;

 CREATE TABLE IF NOT EXISTS message_4 (
    chunkId uuid,
    field bigint,
    value blob,
    PRIMARY KEY (chunkId, field)
) WITH COMPACT STORAGE
    AND CLUSTERING ORDER BY (field ASC)
    AND compression = {'sstable_compression': ''}
    AND min_index_interval = 256;

 CREATE TABLE IF NOT EXISTS message_5 (
    chunkId uuid,
    field bigint,
    value blob,
    PRIMARY KEY (chunkId, field)
) WITH COMPACT STORAGE
    AND CLUSTERING ORDER BY (field ASC)
    AND compression = {'sstable_compression': ''}
    AND min_index_interval = 256;

 CREATE TABLE IF NOT EXISTS message_6 (
    chunkId uuid,
    field bigint,
    value blob,
    PRIMARY KEY (chunkId, field)
) WITH COMPACT STORAGE
    AND CLUSTERING ORDER BY (field ASC)
    AND compression = {'sstable_compression': ''}
    AND min_index_interval = 256;

 CREATE TABLE IF NOT EXISTS message_7 (
    chunkId uuid,
    field bigint,
    value blob,
    PRIMARY KEY (chunkId, field)
) WITH COMPACT STORAGE
    AND CLUSTERING ORDER BY (field ASC)
    AND compression = {'sstable_compression': ''}
    AND min_index_interval = 256;
    

 CREATE TABLE IF NOT EXISTS message_8 (
    chunkId uuid,
    field bigint,
    value blob,
    PRIMARY KEY (chunkId, field)
) WITH COMPACT STORAGE
    AND CLUSTERING ORDER BY (field ASC)
    AND compression = {'sstable_compression': ''}
    AND min_index_interval = 256;

 CREATE TABLE IF NOT EXISTS message_9 (
    chunkId uuid,
    field bigint,
    value blob,
    PRIMARY KEY (chunkId, field)
) WITH COMPACT STORAGE
    AND CLUSTERING ORDER BY (field ASC)
    AND compression = {'sstable_compression': ''}
    AND min_index_interval = 256;

