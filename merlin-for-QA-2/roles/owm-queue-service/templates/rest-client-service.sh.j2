#!/bin/bash

CURL=`which curl`
PYTHON=`which python`
RESTHOST=localhost
RESTPORT={{queue_service_port}}

if [ -z "$CURL" ]; then
	echo "No curl available"
	exit 1
fi

help() {

        echo "Usage:"
        echo "$0 host <host> port <port> method enqueue name [queue_name] metadata [json] body [body] time [delivery time]"
        echo "$0 host <host> port <port> method dequeue name [queue_name]"
        echo "$0 host <host> port <port> method fetch messageid [message id]"
        echo "$0 host <host> port <port> method delete messageid [message id]"

}

while [ $# -gt 1 ]; do

        case $1 in
                host)
                        shift
                        RESTHOST=$1
                        ;;
                port)
                        shift
                        RESTPORT=$1
                        ;;
                method)
                        shift
                        METHOD=$1
                        ;;
                name)
                		shift
                		NAME=$1
                		;;
                metadata)
                        shift
                        METADATA=$1
                        ;;
                body)
                        shift
                        BODY=$1
                        ;;
                time)
                		shift
                		TIME=$1
                		;;
                messageid)
                        shift
                        MESSAGEID=$1
                        ;;
                *)
                        help
                        exit 1
                        ;;
        esac

        shift
done;

CMD_ID=${RANDOM}

case $METHOD in
	enqueue)
        if [ -z "$METADATA" ]; then METADATA='{"control":{"key1":"'${CMD_ID}'"},"header":{"key1":"'${CMD_ID}'"}}'; fi
        if [ -z "$BODY" ]; then BODY=${CMD_ID}; fi
        if [ -z "$TIME" ]; then TIME=$(date +%Y%m%d%H%M%s); fi
        CMD=$(${CURL} -L -X POST http://${RESTHOST}:${RESTPORT}/jsonrpc2 -H 'Content-Type:application/json'  -d '{"jsonrpc": "2.0", "id": '${CMD_ID}', "method": "QueueService.'${METHOD}'", "params": { "name": "'${NAME}'", "metadata": '${METADATA}', "body": "'${BODY}'", "deliveryTime": "'${TIME}'" } }' 2>/dev/null)
    	;;
    dequeue)
		CMD=$(${CURL} -L -X POST http://${RESTHOST}:${RESTPORT}/jsonrpc2 -H 'Content-Type:application/json'  -d '{"jsonrpc": "2.0", "id": '${CMD_ID}', "method": "QueueService.'${METHOD}'", "params": { "name": "'${NAME}'" } }' 2>/dev/null)
		;;
	fetch)
		CMD=$(${CURL} -L -X POST http://${RESTHOST}:${RESTPORT}/jsonrpc2 -H 'Content-Type:application/json'  -d '{"jsonrpc": "2.0", "id": '${CMD_ID}', "method": "QueueService.'${METHOD}'", "params": { "messageId": "'${MESSAGEID}'" } }' 2>/dev/null)
		;;
	delete)
		CMD=$(${CURL} -L -X POST http://${RESTHOST}:${RESTPORT}/jsonrpc2 -H 'Content-Type:application/json'  -d '{"jsonrpc": "2.0", "id": '${CMD_ID}', "method": "QueueService.'${METHOD}'", "params": { "messageKey": "'${MESSAGEID}'" } }' 2>/dev/null)
		;;
	reschedule)
		if [ -z "$METADATA" ]; then METADATA='{"control":{"key1":"'${CMD_ID}'"},"header":{"key1":"'${CMD_ID}'"}}'; fi
		if [ -z "$TIME" ]; then TIME=$(date +%Y%m%d%H%M%s); fi
		CMD=$(${CURL} -L -X POST http://${RESTHOST}:${RESTPORT}/jsonrpc2 -H 'Content-Type:application/json'  -d '{"jsonrpc": "2.0", "id": '${CMD_ID}', "method": "QueueService.'${METHOD}'", "params": { "messageKey": "'${MESSAGEID}'", "metadata": '${METADATA}', "deliveryTime": "'${TIME}'" } }' 2>/dev/null)
		;;
	*)
		help
		exit 1
		MM
esac

if [ -n "$PYTHON" ]; then
	echo $CMD | python -m json.tool
else
	echo $CMD
fi
