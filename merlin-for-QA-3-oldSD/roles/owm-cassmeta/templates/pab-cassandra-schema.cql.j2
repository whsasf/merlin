// Keyspace for Pab
// Schema version 1.0.2


CREATE KEYSPACE IF NOT EXISTS PAB
  WITH REPLICATION = { 
     'class' : 'NetworkTopologyStrategy',
{% set comma = joiner(",") %}
{% for site in sites -%}
      {{ comma() }}'{{site}}' : '{{metareplicationfactor}}'
{%- endfor %}
    }
  AND DURABLE_WRITES = true;

/* Create new empty keyspace with default settings (no replication). */

/*  ***  IMPORTANT ***
 Replace the <DC x> and <number of replicas> by the appropriate data centers and number of replicas
 Example for a single node:
*/

/* Single Node testing only */
/*
CREATE KEYSPACE IF NOT EXISTS PAB
   WITH REPLICATION = {
        'class' : 'NetworkTopologyStrategy',
{% for site in sites %}
      '{{site}}' : 1
{% endfor %}
    }
  AND DURABLE_WRITES = true;
*/

/* Use keyspace */

USE PAB;



// PAB/OWM configuration table. This table possibly moves to a
// configuration keyspace if we plan to have a one-stop-shop for cass stubs.
// Used for tracking schema versions, updates, etc.

CREATE TABLE IF NOT EXISTS OWM_Config
(
    service     text,       // Short name of this service. Part of primary key.
    component   text,       // sub category, component, folder. Part of PK.
    server      text,       // Server. May be wildcard or blank. Part of PK.
    key         text,       // Clustering key.
    value       text,       // Configuration value.
    PRIMARY KEY ((service, component, server), key)
)
WITH CLUSTERING ORDER BY (key ASC );

INSERT INTO OWM_Config (service, component, server, key, value) VALUES ('PAB', 'Schema', '', 'Version', '1.0.2');


// Address book index, used on address book creation and deletion
// to garantee uniqueness of address book identifier

CREATE TABLE IF NOT EXISTS AddressBookIndex
(
    userId ascii,               // mX mailboxid (?)
    addressbook varchar,        // Address book / safety list identifier (ex: 'main', or 'sfty-main')
    abId timeuuid,              // Address book / safety list UID, key to access other tables
    PRIMARY KEY (userId, addressbook)
);


// Actual address books

CREATE TABLE IF NOT EXISTS AddressBooks
(
    userId ascii,               // User mX mailboxid (?)
    addressbook varchar,        // Address book / safety list identifier (ex: 'main', or 'sfty-main')
    abId timeuuid,              // Address book / safety list UID, key to access other tables
    displayName varchar,        // Address book display name
    cTag timeuuid,              // Address book collection tag
    acl set<varchar>,           // Access control entries
    delTime timestamp,          // Deletion timestamp date
    properties map<varchar, varchar>,   // AB properties
    PRIMARY KEY (userId, addressbook, abId)
);

// ACL values are made of <ace type>:[user sid]:[domain sid]:<access>
//     ace type can be user, dom, grp, all
//     access can be 0: user, 1: domain, 2, group, 3: all, 4: none


// Mounted address books, e.g. address books user has subscribed to
// Depending how mounted address book list is dealt with in PAB, this table could be merged in AddressBooks table

CREATE TABLE IF NOT EXISTS MountedAddressBooks
(
    userId ascii,               // User mX mailboxid
    addressbook varchar,        // Address book identifier, ex: 'main'
    ownerId ascii,              // Owner mX mailboxid
    displayName varchar,        // Address book display name
    access int,                 // Access 0 (read only), 1 (read write), 2 (none), other (invalid)
    PRIMARY KEY (userId, addressbook, ownerId)
);


// Address book counters
// Cassandra requires a separate table with counters only

CREATE TABLE IF NOT EXISTS ABCounters
(
    abId timeuuid,                      // Address book UID
    actContacts counter,                // Number of active contacts in the address book
    actGroups counter,                  // Number of active groups in the address book
    actAggregated counter,              // Number of active aggregated contacts in the address book
    delContacts counter,                // Number of deleted contacts in the address book
    delGroups counter,                  // Number of deleted groups in the address book
    delAggregated counter,              // Number of deleted aggregated contacts in the address book
    PRIMARY KEY (abId)
);


CREATE TABLE IF NOT EXISTS Entries
(
    abId timeuuid,                      // Address book UID
    entryType int,                      // Entry type: 1(contact), 2(group), 4(agg contact)
    entryId varchar,                    // Entry id, key to other tables
    entryTag timeuuid,                  // Entry tag, key to other tables
    trashTime timestamp,                // Trash time
    restoreTime timestamp,              // Restore time
    delTime timestamp,                  // Deletion timestamp date
    PRIMARY KEY (abId, entryType, entryId)
);

// Not sure entryId is required in key. It could be static instead

CREATE TABLE IF NOT EXISTS EntryAttributes
(
    abId timeuuid,              // Address book UID
    entryId varchar,            // Entry id, key to other tables
    entryTag timeuuid,          // Entry tag, key to other tables
    name varchar,               // Normalized (lowercase) attribute name
    value varchar,              // Attribute value
    type int,                   // Attribute type
    parameters map<ascii, varchar>, // Value parameters (ALTID, PIDs, LANG, SORT-AS, PREF, MEDIATYPE, TZ, VALUE...)
    PRIMARY KEY (abId, entryId, entryTag, name, value)
);

// type is made of:
// bit 0-7  primary type:  0(string), 1(binary), 2(custom)
// bit 8-31 value order: starts at 0 (allows to order attribute values)


// Potential issue in this table is that all attributes + their values in an AB will be on the
// same node (as partition key is abId only)
CREATE TABLE IF NOT EXISTS AddressbookAttributes
(
    abId timeuuid,              // Address book UID
    name varchar,               // Normalized (lowercase) attribute name
    entryId varchar,            // Entry id
    entryTag timeuuid,          // Entry etag
    entryType int,              // Entry type: 1(contact), 2(group), 4(agg contact)
    value varchar,              // Attribute value
    type int,                   // Attribute type
    parameters map<ascii, varchar>, // Value parameters (ALTID, PIDs, LANG, SORT-AS, PREF, MEDIATYPE, TZ, VALUE...)
    PRIMARY KEY (abId, name, entryId, entryTag, value)
);

// Large values like photo - currently not used
CREATE TABLE IF NOT EXISTS AttributeValues
(
    valueId timeuuid,           // Value UID
    value varchar,              // Attribute value
    PRIMARY KEY (valueId)
);

// Potential issue in this table is that all entries in an AB will be on the
// same node (as partition key is abId only)
CREATE TABLE IF NOT EXISTS ChildToParents
(
    abId timeuuid,              // Address book UID
    childId varchar,            // Child entry id
    parentId varchar,           // Parent entry id
    parentTag timeuuid,         // Parent entry tag
    link int,                   // Link type: 0 (group to contact), 1 (group to group), 2 (group to aggregated), 3 (aggregated to contact), ...
    PRIMARY KEY(abId, childId, parentId, parentTag)
);

CREATE TABLE IF NOT EXISTS SafetyListEntries (
    userId varchar,         // User id (mX mailboxid)
    listId timeuuid,        // List UUID
    listType int,           // List type: 1 (full_allow), 2(fully_block), 3 (partial_allow), 4 (partial block)
    key varchar,            // Email address or contact/group URL
    sftyType varchar,       // Safety type: MAIL or CONTACT+tag+abid+id or GROUP+tag+abid+id
    friendlyName varchar,   // Friendly name
    records set<varchar>,   // Msg ids
    PRIMARY KEY ((userId, listId), key, listType, sftyType)
);


// This table contains the house-keeping status of the instance
// e.g. the last user the instance processed.
// This table is used when instance needs to resume house-keeping,
// and is regularly updated by the server instance
CREATE TABLE IF NOT EXISTS MaintenanceStatus
(
    instance varchar,       // Server instance (ped name)
    site varchar,           // Last server site
    bucket int,             // Last bucket being processed
    userId ascii,           // Id (mX mailboxid) of last user processed
    last timestamp,         // Time stamp of last maintenance
    PRIMARY KEY(instance)
);


// Maintenance status per user, e.g. when maintenance was run last for each user
// New entries in this table are added on address book creation (users don't show up in this table
// until at least an address book is created for them)
CREATE TABLE IF NOT EXISTS MaintenanceUsers
(
    site varchar,           // Site name
    bucket int,             // Bucket id
    userId ascii,           // Id (mX mailboxid) of last user processed
    last timestamp,         // time stamp of last maintenance
    PRIMARY KEY((site, bucket), userId)
);
